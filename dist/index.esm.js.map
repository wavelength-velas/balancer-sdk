{"version":3,"file":"index.esm.js","sources":["../src/pool-stable/encoder.ts","../src/pool-weighted/encoder.ts","../src/pool-weighted/normalizedWeights.ts","../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../src/pool-utils/poolId.ts","../src/utils/errors.ts","../src/utils/signatures.ts","../src/utils/permit.ts","../src/utils/assetHelpers.ts","../src/utils/aaveHelpers.ts","../src/utils/index.ts","../src/types.ts","../src/swapsService/types.ts","../src/swapsService/queryBatchSwap.ts","../src/constants/contracts.ts","../src/swapsService/helpers.ts","../src/swapsService/index.ts","../src/constants/network.ts","../src/constants/subgraph.ts","../src/relayerService/index.ts","../src/sdk/index.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePhantomPoolJoinKind {\n  INIT = 0,\n  COLLECT_PROTOCOL_FEES,\n}\n\nexport enum StablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a StablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [StablePoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for collecting protocol fees for StablePhantomPool\n   */\n  static joinCollectProtocolFees = (): string =>\n    defaultAbiCoder.encode(['uint256'], [StablePhantomPoolJoinKind.COLLECT_PROTOCOL_FEES]);\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [StablePoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum WeightedPoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  MANAGEMENT_FEE_TOKENS_OUT,\n}\n\nexport class WeightedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [WeightedPoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBPTOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n\nexport class ManagedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting a ManagedPool for withdrawing management fees.\n   * This can only be done by the pool owner.\n   */\n  static exitForManagementFees = (): string =>\n    defaultAbiCoder.encode(['uint256'], [WeightedPoolExitKind.MANAGEMENT_FEE_TOKENS_OUT]);\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n  // When the number is exactly equal to the max, normalizing with common inputs\n  // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n  if (weights.length == MaxWeightedTokens) {\n    return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n  }\n\n  const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n  if (sum.eq(ONE)) return weights;\n\n  const normalizedWeights = [];\n  let normalizedSum = Zero;\n  for (let index = 0; index < weights.length; index++) {\n    if (index < weights.length - 1) {\n      normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n      normalizedSum = normalizedSum.add(normalizedWeights[index]);\n    } else {\n      normalizedWeights[index] = ONE.sub(normalizedSum);\n    }\n  }\n\n  return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n  const totalWeight = weights.reduce((total: BigNumber, weight) => total.add(weight), Zero);\n  return totalWeight.eq(ONE);\n};\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? prefix + \": \" + provided : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n  poolId: string\n): { address: string; specialization: PoolSpecialization; nonce: BigNumber } => {\n  return {\n    address: getPoolAddress(poolId),\n    specialization: getPoolSpecialization(poolId),\n    nonce: getPoolNonce(poolId),\n  };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n\n  // Only have 3 pool specializations so we can just pull the relevant character\n  const specializationCode = parseInt(poolId[45]);\n  invariant(specializationCode < 3, 'Invalid pool specialization');\n\n  return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","const balancerErrorCodes: Record<string, string> = {\n  '000': 'ADD_OVERFLOW',\n  '001': 'SUB_OVERFLOW',\n  '002': 'SUB_UNDERFLOW',\n  '003': 'MUL_OVERFLOW',\n  '004': 'ZERO_DIVISION',\n  '005': 'DIV_INTERNAL',\n  '006': 'X_OUT_OF_BOUNDS',\n  '007': 'Y_OUT_OF_BOUNDS',\n  '008': 'PRODUCT_OUT_OF_BOUNDS',\n  '009': 'INVALID_EXPONENT',\n  '100': 'OUT_OF_BOUNDS',\n  '101': 'UNSORTED_ARRAY',\n  '102': 'UNSORTED_TOKENS',\n  '103': 'INPUT_LENGTH_MISMATCH',\n  '104': 'ZERO_TOKEN',\n  '200': 'MIN_TOKENS',\n  '201': 'MAX_TOKENS',\n  '202': 'MAX_SWAP_FEE_PERCENTAGE',\n  '203': 'MIN_SWAP_FEE_PERCENTAGE',\n  '204': 'MINIMUM_BPT',\n  '205': 'CALLER_NOT_VAULT',\n  '206': 'UNINITIALIZED',\n  '207': 'BPT_IN_MAX_AMOUNT',\n  '208': 'BPT_OUT_MIN_AMOUNT',\n  '209': 'EXPIRED_PERMIT',\n  '210': 'NOT_TWO_TOKENS',\n  '300': 'MIN_AMP',\n  '301': 'MAX_AMP',\n  '302': 'MIN_WEIGHT',\n  '303': 'MAX_STABLE_TOKENS',\n  '304': 'MAX_IN_RATIO',\n  '305': 'MAX_OUT_RATIO',\n  '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n  '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n  '308': 'NORMALIZED_WEIGHT_INVARIANT',\n  '309': 'INVALID_TOKEN',\n  '310': 'UNHANDLED_JOIN_KIND',\n  '311': 'ZERO_INVARIANT',\n  '312': 'ORACLE_INVALID_SECONDS_QUERY',\n  '313': 'ORACLE_NOT_INITIALIZED',\n  '314': 'ORACLE_QUERY_TOO_OLD',\n  '315': 'ORACLE_INVALID_INDEX',\n  '316': 'ORACLE_BAD_SECS',\n  '317': 'AMP_END_TIME_TOO_CLOSE',\n  '318': 'AMP_ONGOING_UPDATE',\n  '319': 'AMP_RATE_TOO_HIGH',\n  '320': 'AMP_NO_ONGOING_UPDATE',\n  '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n  '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n  '323': 'RELAYER_NOT_CONTRACT',\n  '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n  '325': 'REBALANCING_RELAYER_REENTERED',\n  '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n  '327': 'SWAPS_DISABLED',\n  '328': 'CALLER_IS_NOT_LBP_OWNER',\n  '329': 'PRICE_RATE_OVERFLOW',\n  '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n  '331': 'WEIGHT_CHANGE_TOO_FAST',\n  '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n  '333': 'UPPER_TARGET_TOO_HIGH',\n  '334': 'UNHANDLED_BY_LINEAR_POOL',\n  '335': 'OUT_OF_TARGET_RANGE',\n  '336': 'UNHANDLED_EXIT_KIND ',\n  '337': 'UNAUTHORIZED_EXIT',\n  '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n  '339': 'UNHANDLED_BY_MANAGED_POOL',\n  '340': 'UNHANDLED_BY_PHANTOM_POOL',\n  '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n  '342': 'INVALID_INITIALIZATION',\n  '400': 'REENTRANCY',\n  '401': 'SENDER_NOT_ALLOWED',\n  '402': 'PAUSED',\n  '403': 'PAUSE_WINDOW_EXPIRED',\n  '404': 'MAX_PAUSE_WINDOW_DURATION',\n  '405': 'MAX_BUFFER_PERIOD_DURATION',\n  '406': 'INSUFFICIENT_BALANCE',\n  '407': 'INSUFFICIENT_ALLOWANCE',\n  '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n  '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n  '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n  '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n  '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n  '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n  '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n  '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n  '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n  '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n  '418': 'SAFE_ERC20_CALL_FAILED',\n  '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n  '420': 'ADDRESS_CANNOT_SEND_VALUE',\n  '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n  '422': 'GRANT_SENDER_NOT_ADMIN',\n  '423': 'REVOKE_SENDER_NOT_ADMIN',\n  '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n  '425': 'BUFFER_PERIOD_EXPIRED',\n  '426': 'CALLER_IS_NOT_OWNER',\n  '427': 'NEW_OWNER_IS_ZERO',\n  '428': 'CODE_DEPLOYMENT_FAILED',\n  '429': 'CALL_TO_NON_CONTRACT',\n  '430': 'LOW_LEVEL_CALL_FAILED',\n  '431': 'NOT_PAUSED',\n  '500': 'INVALID_POOL_ID',\n  '501': 'CALLER_NOT_POOL',\n  '502': 'SENDER_NOT_ASSET_MANAGER',\n  '503': 'USER_DOESNT_ALLOW_RELAYER',\n  '504': 'INVALID_SIGNATURE',\n  '505': 'EXIT_BELOW_MIN',\n  '506': 'JOIN_ABOVE_MAX',\n  '507': 'SWAP_LIMIT',\n  '508': 'SWAP_DEADLINE',\n  '509': 'CANNOT_SWAP_SAME_TOKEN',\n  '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n  '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n  '512': 'INTERNAL_BALANCE_OVERFLOW',\n  '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n  '514': 'INVALID_ETH_INTERNAL_BALANCE',\n  '515': 'INVALID_POST_LOAN_BALANCE',\n  '516': 'INSUFFICIENT_ETH',\n  '517': 'UNALLOCATED_ETH',\n  '518': 'ETH_TRANSFER',\n  '519': 'CANNOT_USE_ETH_SENTINEL',\n  '520': 'TOKENS_MISMATCH',\n  '521': 'TOKEN_NOT_REGISTERED',\n  '522': 'TOKEN_ALREADY_REGISTERED',\n  '523': 'TOKENS_ALREADY_SET',\n  '524': 'TOKENS_LENGTH_MUST_BE_2',\n  '525': 'NONZERO_TOKEN_BALANCE',\n  '526': 'BALANCE_TOTAL_OVERFLOW',\n  '527': 'POOL_NO_TOKENS',\n  '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n  '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n  '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n  '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n};\n\nexport class BalancerErrors {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static isErrorCode = (error: string): boolean => {\n    if (!error.includes('BAL#')) return false;\n\n    const errorCode = error.replace('BAL#', '');\n    return Object.keys(balancerErrorCodes).includes(errorCode);\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason\n   */\n  static parseErrorCode = (error: string): string => {\n    if (!error.includes('BAL#')) throw new Error('Error code not found');\n    const errorCode = error.replace('BAL#', '');\n\n    const actualError = balancerErrorCodes[errorCode];\n\n    if (!actualError) throw new Error('Error code not found');\n\n    return actualError;\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n   */\n  static tryParseErrorCode = (error: string): string => {\n    try {\n      return BalancerErrors.parseErrorCode(error);\n    } catch {\n      return error;\n    }\n  };\n\n  /**\n   * Tests whether a string is a known Balancer error message\n   * @param error - a string to be checked verified as a Balancer error message\n   */\n  static isBalancerError = (error: string): boolean => Object.values(balancerErrorCodes).includes(error);\n\n  /**\n   * Encodes an error string into the corresponding error code\n   * @param error - a Balancer error message string\n   * @returns a Balancer error code of the form `BAL#000`\n   */\n  static encodeError = (error: string): string => {\n    const encodedError = Object.entries(balancerErrorCodes).find(([, message]) => message === error);\n\n    if (!encodedError) throw Error('Error message not found');\n\n    return `BAL#${encodedError[0]}`;\n  };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n  if (typeof account == 'string') return account;\n  if (Signer.isSigner(account)) return account.getAddress();\n  if (account.address) return account.address;\n  throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n  JoinPool = 'JoinPool',\n  ExitPool = 'ExitPool',\n  Swap = 'Swap',\n  BatchSwap = 'BatchSwap',\n  SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static encodeCalldataAuthorization = (calldata: string, deadline: BigNumberish, signature: string): string => {\n    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n    const { v, r, s } = splitSignature(signature);\n    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n    const encodedR = r.slice(2);\n    const encodedS = s.slice(2);\n    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n  };\n\n  static signJoinAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.JoinPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signExitAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.ExitPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.Swap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signBatchSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.BatchSwap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSetRelayerApprovalAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.SetRelayerApproval,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signAuthorizationFor = async (\n    type: RelayerAction,\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<string> => {\n    const { chainId } = await validator.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer V2 Vault',\n      version: '1',\n      chainId,\n      verifyingContract: validator.address,\n    };\n\n    const types = {\n      [type]: [\n        { name: 'calldata', type: 'bytes' },\n        { name: 'sender', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      calldata: allowedCalldata,\n      sender: await accountToAddress(allowedSender),\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    return user._signTypedData(domain, types, value);\n  };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n  token: Contract,\n  owner: Signer & TypedDataSigner,\n  spender: Account,\n  amount: BigNumberish,\n  deadline: BigNumberish = MAX_DEADLINE,\n  nonce?: BigNumberish\n): Promise<{ v: number; r: string; s: string; deadline: BigNumber; nonce: BigNumber }> => {\n  const { chainId } = await token.provider.getNetwork();\n  const ownerAddress = await owner.getAddress();\n\n  if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n  const domain = {\n    name: await token.name(),\n    version: '1',\n    chainId,\n    verifyingContract: token.address,\n  };\n\n  const types = {\n    Permit: [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ],\n  };\n\n  const value = {\n    owner: ownerAddress,\n    spender: await accountToAddress(spender),\n    value: amount,\n    nonce,\n    deadline,\n  };\n\n  const signature = await owner._signTypedData(domain, types, value);\n  return { ...splitSignature(signature), deadline: BigNumber.from(deadline), nonce: BigNumber.from(nonce) };\n};\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number => (tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1);\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n  matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n  public readonly ETH: string = AddressZero;\n  public readonly WETH: string;\n\n  constructor(wethAddress: string) {\n    this.WETH = getAddress(wethAddress);\n  }\n\n  static isEqual = (addressA: string, addressB: string): boolean => getAddress(addressA) === getAddress(addressB);\n\n  /**\n   * Tests whether `token` is ETH (represented by `0x0000...0000`).\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n  /**\n   * Tests whether `token` is WETH.\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n  /**\n   * Converts an asset to the equivalent ERC20 address.\n   *\n   * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n   * @param token - the address of the asset to be translated to an equivalent ERC20\n   * @returns the address of translated ERC20 asset\n   */\n  translateToERC20 = (token: string): string => (this.isETH(token) ? this.WETH : token);\n\n  /**\n   * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n   *\n   * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n   *\n   * The zero address (representing ETH) is sorted as if it were the WETH address.\n   * This matches the behaviour expected by the Vault when receiving an array of addresses.\n   *\n   * @param tokens - an array of token addresses to be sorted in ascending order\n   * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n   * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n   *\n   * @example\n   * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n   * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n   * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n   */\n  sortTokens(tokens: string[], ...others: unknown[][]): [string[], ...unknown[][]] {\n    others.forEach((array) => invariant(tokens.length === array.length, 'array length mismatch'));\n\n    // We want to sort ETH as if were WETH so we translate to ERC20s\n    const erc20Tokens = tokens.map(this.translateToERC20);\n\n    const transpose = transposeMatrix([erc20Tokens, ...others]) as [string, ...unknown[]][];\n    const sortedTranspose = transpose.sort(([tokenA], [tokenB]) => cmpTokens(tokenA, tokenB));\n    const [sortedErc20s, ...sortedOthers] = transposeMatrix(sortedTranspose) as [string[], ...unknown[][]];\n\n    // If one of the tokens was ETH, we need to translate back from WETH\n    const sortedTokens = tokens.includes(this.ETH)\n      ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))\n      : sortedErc20s;\n    return [sortedTokens, ...sortedOthers];\n  }\n}\n","import { JsonRpcProvider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\n\nimport aTokenRateProviderAbi from '../abi/StaticATokenRateProvider.json';\n\nexport class AaveHelpers {\n\n    static async getRate(rateProviderAddress: string, provider: JsonRpcProvider): Promise<string>  {\n        const rateProviderContract = new Contract(rateProviderAddress, aTokenRateProviderAbi, provider);\n\n        const rate = await rateProviderContract.getRate();\n        return rate.toString();\n    }\n}","import { getAddress } from '@ethersproject/address';\n\nexport * from './errors';\nexport * from './permit';\nexport * from './signatures';\nexport * from './assetHelpers';\nexport * from './aaveHelpers';\n\nexport const isSameAddress = (address1: string, address2: string): boolean =>\n    getAddress(address1) === getAddress(address2);","import { BigNumberish } from '@ethersproject/bignumber';\nimport { Network } from './constants/network';\nimport { Contract } from '@ethersproject/contracts';\n\nexport enum PoolSpecialization {\n    GeneralPool = 0,\n    MinimalSwapInfoPool,\n    TwoTokenPool,\n}\n\n// Joins\n\nexport type JoinPoolRequest = {\n    assets: string[];\n    maxAmountsIn: BigNumberish[];\n    userData: string;\n    fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n    assets: string[];\n    minAmountsOut: string[];\n    userData: string;\n    toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n    DepositInternal = 0,\n    WithdrawInternal,\n    TransferInternal,\n    TransferExternal,\n}\n\nexport type UserBalanceOp = {\n    kind: UserBalanceOpKind;\n    asset: string;\n    amount: BigNumberish;\n    sender: string;\n    recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n    Withdraw = 0,\n    Deposit = 1,\n    Update = 2,\n}\n\nexport type PoolBalanceOp = {\n    kind: PoolBalanceOpKind;\n    poolId: string;\n    token: string;\n    amount: BigNumberish;\n};\n\nexport type ConfigSdk = {\n    network: Network;\n    rpcUrl: string;\n    subgraphUrl: string;\n};\n\nexport interface TransactionData {\n    contract?: Contract;\n    function: string;\n    params: string[];\n    outputs?: any;\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum SwapType {\n    SwapExactIn,\n    SwapExactOut,\n}\n\nexport type FundManagement = {\n    sender: string;\n    recipient: string;\n    fromInternalBalance: boolean;\n    toInternalBalance: boolean;\n};\n\nexport type SingleSwap = {\n    poolId: string;\n    kind: SwapType;\n    assetIn: string;\n    assetOut: string;\n    amount: BigNumberish;\n    userData: string;\n};\n\nexport type Swap = {\n    kind: SwapType;\n    singleSwap: SingleSwap;\n    limit: BigNumberish;\n    deadline: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n    poolId: string;\n    assetInIndex: number;\n    assetOutIndex: number;\n    amount: string;\n    userData: string;\n};\n\nexport type BatchSwap = {\n    kind: SwapType;\n    swaps: BatchSwapStep[];\n    assets: string[];\n    funds: FundManagement;\n    limits: BigNumberish[];\n    deadline: BigNumberish;\n};\n\nexport interface FetchPoolsInput {\n    fetchPools: boolean;\n    fetchOnChain: boolean;\n}\n\nexport interface QueryWithSorInput {\n    tokensIn: string[];\n    tokensOut: string[];\n    swapType: SwapType;\n    amounts: string[];\n    fetchPools: FetchPoolsInput;\n}\n\nexport interface QueryWithSorOutput {\n    returnAmounts: string[];\n    swaps: BatchSwapStep[];\n    assets: string[];\n    deltas: string[];\n}","import { BigNumberish } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { AddressZero, Zero } from '@ethersproject/constants';\nimport { SOR, SwapTypes, SwapInfo } from '@balancer-labs/sor';\nimport {\n    SwapType,\n    BatchSwapStep,\n    FundManagement,\n    QueryWithSorInput,\n    QueryWithSorOutput,\n} from './types';\n\n/*\n * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n *\n * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n * receives are the same that an equivalent `batchSwap` call would receive.\n */\nexport async function queryBatchSwap(\n    vaultContract: Contract,\n    swapType: SwapType,\n    swaps: BatchSwapStep[],\n    assets: string[]\n): Promise<string[]> {\n    const funds: FundManagement = {\n        sender: AddressZero,\n        recipient: AddressZero,\n        fromInternalBalance: false,\n        toInternalBalance: false,\n    };\n\n    try {\n        const deltas = await vaultContract.queryBatchSwap(\n            swapType,\n            swaps,\n            assets,\n            funds\n        );\n        return deltas.map((d: BigNumberish) => d.toString());\n    } catch (err) {\n        throw `queryBatchSwap call error: ${err}`;\n    }\n}\n\n/*\nUses SOR to create a batchSwap which is then queried onChain.\n*/\nexport async function queryBatchSwapWithSor(\n    sor: SOR,\n    vaultContract: Contract,\n    queryWithSor: QueryWithSorInput\n): Promise<QueryWithSorOutput> {\n    if (queryWithSor.fetchPools.fetchPools)\n        await sor.fetchPools([], queryWithSor.fetchPools.fetchOnChain);\n\n    const swaps: BatchSwapStep[][] = [];\n    const assetArray: string[][] = [];\n    // get path information for each tokenIn\n    for (let i = 0; i < queryWithSor.tokensIn.length; i++) {\n        const swap = await getSorSwapInfo(\n            queryWithSor.tokensIn[i],\n            queryWithSor.tokensOut[i],\n            queryWithSor.swapType,\n            queryWithSor.amounts[i].toString(),\n            sor\n        );\n        swaps.push(swap.swaps);\n        assetArray.push(swap.tokenAddresses);\n    }\n\n    // Join swaps and assets together correctly\n    const batchedSwaps = batchSwaps(assetArray, swaps);\n\n    const returnTokens =\n        queryWithSor.swapType === SwapType.SwapExactIn\n            ? queryWithSor.tokensOut\n            : queryWithSor.tokensIn;\n    const returnAmounts: string[] = Array(returnTokens.length).fill(Zero);\n    let deltas: BigNumberish[] = Array(batchedSwaps.assets.length).fill(Zero);\n    try {\n        // Onchain query\n        deltas = await queryBatchSwap(\n            vaultContract,\n            queryWithSor.swapType,\n            batchedSwaps.swaps,\n            batchedSwaps.assets\n        );\n\n        if (deltas.length > 0) {\n            returnTokens.forEach(\n                (t, i) =>\n                    (returnAmounts[i] =\n                        deltas[\n                            batchedSwaps.assets.indexOf(t.toLowerCase())\n                        ].toString() ?? Zero.toString())\n            );\n        }\n    } catch (err) {\n        console.error(`queryBatchSwapTokensIn error: ${err}`);\n    }\n\n    return {\n        returnAmounts,\n        swaps: batchedSwaps.swaps,\n        assets: batchedSwaps.assets,\n        deltas: deltas.map((d) => d.toString()),\n    };\n}\n\n/*\nUse SOR to get swapInfo for tokenIn>tokenOut.\nSwapInfos.swaps has path information.\n*/\nasync function getSorSwapInfo(\n    tokenIn: string,\n    tokenOut: string,\n    swapType: SwapType,\n    amount: string,\n    sor: SOR\n): Promise<SwapInfo> {\n    const swapTypeSOR: SwapTypes =\n        swapType === SwapType.SwapExactIn\n            ? SwapTypes.SwapExactIn\n            : SwapTypes.SwapExactOut;\n    const swapInfo = await sor.getSwaps(\n        tokenIn.toLowerCase(),\n        tokenOut.toLowerCase(),\n        swapTypeSOR,\n        amount\n    );\n    return swapInfo;\n}\n\n/*\nFormat multiple individual swaps/assets into a single swap/asset.\n*/\nfunction batchSwaps(\n    assetArray: string[][],\n    swaps: BatchSwapStep[][]\n): { swaps: BatchSwapStep[]; assets: string[] } {\n    // asset addresses without duplicates\n    const newAssetArray = [...new Set(assetArray.flat())];\n\n    // Update indices of each swap to use new asset array\n    swaps.forEach((swap, i) => {\n        swap.forEach((poolSwap) => {\n            poolSwap.assetInIndex = newAssetArray.indexOf(\n                assetArray[i][poolSwap.assetInIndex]\n            );\n            poolSwap.assetOutIndex = newAssetArray.indexOf(\n                assetArray[i][poolSwap.assetOutIndex]\n            );\n        });\n    });\n\n    // Join Swaps into a single batchSwap\n    const batchedSwaps = swaps.flat();\n    return { swaps: batchedSwaps, assets: newAssetArray };\n}\n","export const balancerVaultMap: { [network: number]: string } = {\n    106: '0xA06e92c4A9D5Fe540666e1BFf10982d496D5A70D',\n};\n","import { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther } from '@ethersproject/constants';\n\nimport { SwapType } from './types';\nimport { isSameAddress } from '../utils';\n\n/*\n* Helper to create limits using a defined slippage amount.\n* @param tokensIn - Array of token in addresses.\n* @param tokensOut - Array of token out addresses.\n* @param swapType - Type of swap - SwapExactIn or SwapExactOut\n* @param deltas - An array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array.\n* @param assets - array contains the addresses of all assets involved in the swaps.\n* @param slippage - Slippage to be applied. i.e. 5%=50000000000000000.\n* @returns Returns an array (same length as assets) with limits applied for each asset.\n*/\nexport function getLimitsForSlippage(\n    tokensIn: string[],\n    tokensOut: string[],\n    swapType: SwapType,\n    deltas: BigNumberish[],\n    assets: string[],\n    slippage: BigNumberish\n): BigNumberish[] {\n    // Limits:\n    // +ve means max to send\n    // -ve mean min to receive\n    // For a multihop the intermediate tokens should be 0\n    const limits: BigNumber[] = new Array(assets.length).fill(Zero);\n\n    assets.forEach((token, i) => {\n        if(tokensIn.some(tokenIn => isSameAddress(token, tokenIn))) {\n            // For SwapExactOut slippage is on tokenIn, i.e. amtIn + slippage\n            const slippageAmount = BigNumber.from(slippage).add(WeiPerEther);\n            limits[i] = swapType === SwapType.SwapExactOut ? limits[i].add(BigNumber.from(deltas[i]).mul(slippageAmount).div(WeiPerEther)) : limits[i].add(deltas[i]);\n        }\n\n        if (tokensOut.some(tokenOut => isSameAddress(token, tokenOut))) {\n            // For SwapExactIn slippage is on tokenOut, i.e. amtOut - slippage\n            const slippageAmount = WeiPerEther.sub(BigNumber.from(slippage));\n            limits[i] = swapType === SwapType.SwapExactIn ? limits[i].add(BigNumber.from(deltas[i]).mul(slippageAmount).div(WeiPerEther)) : limits[i].add(deltas[i]);\n        }\n    });\n\n    return limits;\n}\n","import { JsonRpcProvider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\nimport { SOR, SubgraphPoolBase } from '@balancer-labs/sor';\n\nimport { ConfigSdk } from '../types';\nimport { Network } from '../constants/network';\nimport {\n    SwapType,\n    QueryWithSorInput,\n    QueryWithSorOutput,\n    BatchSwap,\n} from './types';\nimport { queryBatchSwap, queryBatchSwapWithSor } from './queryBatchSwap';\nimport { balancerVaultMap } from '../constants/contracts';\nimport { getLimitsForSlippage } from './helpers';\n\nimport vaultAbi from '../abi/Vault.json';\n\nexport class SwapsService {\n    network: Network;\n    rpcUrl: string;\n    sor: SOR;\n\n    constructor(config: ConfigSdk) {\n        this.network = config.network;\n        this.rpcUrl = config.rpcUrl;\n        const provider = new JsonRpcProvider(this.rpcUrl);\n        this.sor = new SOR(provider, this.network, config.subgraphUrl);\n    }\n\n    static getLimitsForSlippage(\n        tokensIn: string[],\n        tokensOut: string[],\n        swapType: SwapType,\n        deltas: string[],\n        assets: string[],\n        slippage: string\n    ): string[] {\n        // TO DO - Check best way to do this?\n        const limits = getLimitsForSlippage(\n            tokensIn,\n            tokensOut,\n            swapType,\n            deltas,\n            assets,\n            slippage\n        );\n\n        return limits.map((l) => l.toString());\n    }\n\n    /**\n     * fetchPools saves updated pools data to SOR internal onChainBalanceCache.\n     * @param {SubgraphPoolBase[]} [poolsData=[]] If poolsData passed uses this as pools source otherwise fetches from config.subgraphUrl.\n     * @param {boolean} [isOnChain=true] If isOnChain is true will retrieve all required onChain data via multicall otherwise uses subgraph values.\n     * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n     */\n    async fetchPools(\n        poolsData: SubgraphPoolBase[] = [],\n        isOnChain = true\n    ): Promise<boolean> {\n        return this.sor.fetchPools(poolsData, isOnChain);\n    }\n\n    /**\n     * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas.\n     * @param batchSwap - BatchSwap information used for query.\n     * @param {SwapType} batchSwap.kind - either exactIn or exactOut.\n     * @param {BatchSwapStep[]} batchSwap.swaps - sequence of swaps.\n     * @param {string[]} batchSwap.assets - array contains the addresses of all assets involved in the swaps.\n     * @returns {Promise<string[]>} Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n     * the same index in the `assets` array.\n     */\n    async queryBatchSwap(\n        batchSwap: Pick<BatchSwap, 'kind' | 'swaps' | 'assets'>\n    ): Promise<string[]> {\n        // TO DO - Pull in a ContractsService and use this to pass Vault to queryBatchSwap.\n        const provider = new JsonRpcProvider(this.rpcUrl);\n        const vaultContract = new Contract(\n            balancerVaultMap[this.network] || '',\n            vaultAbi,\n            provider\n        );\n\n        return await queryBatchSwap(\n            vaultContract,\n            batchSwap.kind,\n            batchSwap.swaps,\n            batchSwap.assets\n        );\n    }\n\n    /**\n     * Uses SOR to create and query a batchSwap.\n     * @param {QueryWithSorInput} queryWithSor - Swap information used for querying using SOR.\n     * @param {string[]} queryWithSor.tokensIn - Array of addresses of assets in.\n     * @param {string[]} queryWithSor.tokensOut - Array of addresses of assets out.\n     * @param {SwapType} queryWithSor.swapType - Type of Swap, ExactIn/Out.\n     * @param {string[]} queryWithSor.amounts - Array of amounts used in swap.\n     * @param {FetchPoolsInput} queryWithSor.fetchPools - Set whether SOR will fetch updated pool info.\n     * @returns {Promise<QueryWithSorOutput>} Returns amount of tokens swaps along with swap and asset info that can be submitted to a batchSwap call.\n     */\n    async queryBatchSwapWithSor(\n        queryWithSor: QueryWithSorInput\n    ): Promise<QueryWithSorOutput> {\n        // TO DO - Pull in a ContractsService and use this to pass Vault to queryBatchSwap.\n        const provider = new JsonRpcProvider(this.rpcUrl);\n        const vaultContract = new Contract(\n            balancerVaultMap[this.network] || '',\n            vaultAbi,\n            provider\n        );\n\n        return await queryBatchSwapWithSor(\n            this.sor,\n            vaultContract,\n            queryWithSor\n        );\n    }\n}\n","export enum Network {\n    MAINNET = 1,\n    ROPSTEN = 3,\n    RINKEBY = 4,\n    GÖRLI = 5,\n    KOVAN = 42,\n    POLYGON = 137,\n    ARBITRUM = 42161,\n    AVALANCHE = 43114,\n    FUJI = 43113\n    VELAS = 106, ABSTRACT = 2741\n}","import { Network } from './network';\n\nexport const SUBGRAPH_URLS = {\n    [Network.MAINNET]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2',\n    [Network.GÖRLI]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-goerli-v2',\n    [Network.KOVAN]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-kovan-v2',\n    [Network.POLYGON]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-polygon-v2',\n    [Network.ARBITRUM]: `https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-arbitrum-v2`,\n};","import { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { Interface } from '@ethersproject/abi';\nimport { MaxUint256, WeiPerEther } from '@ethersproject/constants';\n\nimport { SwapsService } from '../swapsService';\nimport {\n    EncodeBatchSwapInput,\n    EncodeUnwrapAaveStaticTokenInput,\n    OutputReference,\n    EncodeExitPoolInput,\n    ExitAndBatchSwapInput,\n    ExitPoolData,\n    EncodeUnwrapYearnVaultTokenInput,\n    UnwrapType,\n} from './types';\nimport { TransactionData, ExitPoolRequest } from '../types';\nimport {\n    SwapType,\n    FundManagement,\n    BatchSwapStep,\n    FetchPoolsInput,\n} from '../swapsService/types';\n\nimport relayerLibraryAbi from '../abi/VaultActions.json';\nimport aaveWrappingAbi from '../abi/AaveWrapping.json';\nimport yearnWrappingAbi from '../abi/YearnWrapping.json';\n\nexport * from './types';\n\nexport class RelayerService {\n    swapsService: SwapsService;\n    rpcUrl: string;\n    static CHAINED_REFERENCE_PREFIX = 'ba10';\n\n    constructor(swapsService: SwapsService, rpcUrl: string) {\n        this.swapsService = swapsService;\n        this.rpcUrl = rpcUrl;\n    }\n\n    static encodeBatchSwap(params: EncodeBatchSwapInput): string {\n        const relayerLibrary = new Interface(relayerLibraryAbi);\n\n        return relayerLibrary.encodeFunctionData('batchSwap', [\n            params.swapType,\n            params.swaps,\n            params.assets,\n            params.funds,\n            params.limits,\n            params.deadline,\n            params.value,\n            params.outputReferences,\n        ]);\n    }\n\n    static encodeExitPool(params: EncodeExitPoolInput): string {\n        const relayerLibrary = new Interface(relayerLibraryAbi);\n\n        return relayerLibrary.encodeFunctionData('exitPool', [\n            params.poolId,\n            params.poolKind,\n            params.sender,\n            params.recipient,\n            params.exitPoolRequest,\n            params.outputReferences,\n        ]);\n    }\n\n    static encodeUnwrapAaveStaticToken(\n        params: EncodeUnwrapAaveStaticTokenInput\n    ): string {\n        const aaveWrappingLibrary = new Interface(aaveWrappingAbi);\n\n        return aaveWrappingLibrary.encodeFunctionData('unwrapAaveStaticToken', [\n            params.staticToken,\n            params.sender,\n            params.recipient,\n            params.amount,\n            params.toUnderlying,\n            params.outputReferences,\n        ]);\n    }\n\n    static encodeUnwrapYearnVaultToken(\n        params: EncodeUnwrapYearnVaultTokenInput\n    ): string {\n        const yearnWrappingLibrary = new Interface(yearnWrappingAbi);\n\n        return yearnWrappingLibrary.encodeFunctionData(\n            'unwrapYearnVaultToken',\n            [\n                params.vaultToken,\n                params.sender,\n                params.recipient,\n                params.amount,\n                params.outputReference,\n            ]\n        );\n    }\n\n    static toChainedReference(key: BigNumberish): BigNumber {\n        // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n        const paddedPrefix = `0x${\n            RelayerService.CHAINED_REFERENCE_PREFIX\n        }${'0'.repeat(64 - RelayerService.CHAINED_REFERENCE_PREFIX.length)}`;\n        return BigNumber.from(paddedPrefix).add(key);\n    }\n\n    static constructExitCall(params: ExitPoolData): string {\n        const {\n            assets,\n            minAmountsOut,\n            userData,\n            toInternalBalance,\n            poolId,\n            poolKind,\n            sender,\n            recipient,\n            outputReferences,\n        } = params;\n\n        const exitPoolRequest: ExitPoolRequest = {\n            assets,\n            minAmountsOut,\n            userData,\n            toInternalBalance,\n        };\n\n        const exitPoolInput: EncodeExitPoolInput = {\n            poolId,\n            poolKind,\n            sender,\n            recipient,\n            outputReferences,\n            exitPoolRequest,\n        };\n\n        const exitEncoded = RelayerService.encodeExitPool(exitPoolInput);\n        return exitEncoded;\n    }\n\n    /**\n     * exitPoolAndBatchSwap Chains poolExit with batchSwap to final tokens.\n     * @param {ExitAndBatchSwapInput} params\n     * @param {string} exiter - Address used to exit pool.\n     * @param {string} swapRecipient - Address that receives final tokens.\n     * @param {string} poolId - Id of pool being exited.\n     * @param {string[]} exitTokens - Array containing addresses of tokens to receive after exiting pool. (must have the same length and order as the array returned by `getPoolTokens`.)\n     * @param {string} userData - Encoded exitPool data.\n     * @param {string[]} expectedAmountsOut - Expected amounts of exitTokens to receive when exiting pool.\n     * @param {string[]} finalTokensOut - Array containing the addresses of the final tokens out.\n     * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n     * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n     * @returns Transaction data with calldata. Outputs.amountsOut has amounts of finalTokensOut returned.\n     */\n    async exitPoolAndBatchSwap(\n        params: ExitAndBatchSwapInput\n    ): Promise<TransactionData> {\n        const slippageAmountNegative = WeiPerEther.sub(\n            BigNumber.from(params.slippage)\n        );\n        // Set min amounts out of exit pool based on slippage\n        const minAmountsOut = params.expectedAmountsOut.map((amt) =>\n            BigNumber.from(amt)\n                .mul(slippageAmountNegative)\n                .div(WeiPerEther)\n                .toString()\n        );\n\n        // Output of exit is used as input to swaps\n        const outputReferences: OutputReference[] = [];\n        params.exitTokens.forEach((asset, i) => {\n            const key = RelayerService.toChainedReference(i);\n            outputReferences.push({\n                index: i,\n                key: key,\n            });\n        });\n\n        const exitCall = RelayerService.constructExitCall({\n            assets: params.exitTokens,\n            minAmountsOut,\n            userData: params.userData,\n            toInternalBalance: true, // Creates exitPool request with exit to internal balance to save gas for following swaps\n            poolId: params.poolId,\n            poolKind: 0, // This will always be 0 to match supported Relayer types\n            sender: params.exiter,\n            recipient: params.exiter,\n            outputReferences: outputReferences,\n            exitPoolRequest: {} as ExitPoolRequest,\n        });\n\n        // Use swapsService to get swap info for exitTokens>finalTokens\n        // This will give batchSwap swap paths\n        // Amounts out will be worst case amounts\n        const queryResult = await this.swapsService.queryBatchSwapWithSor({\n            tokensIn: params.exitTokens,\n            tokensOut: params.finalTokensOut,\n            swapType: SwapType.SwapExactIn,\n            amounts: minAmountsOut, // Use minAmountsOut as input to swap to account for slippage\n            fetchPools: params.fetchPools,\n        });\n\n        // Update swap amounts with ref outputs from exitPool\n        queryResult.swaps.forEach((swap) => {\n            const token = queryResult.assets[swap.assetInIndex];\n            const index = params.exitTokens.indexOf(token);\n            if (index !== -1)\n                swap.amount = outputReferences[index].key.toString();\n        });\n\n        // const tempDeltas = ['10096980', '0', '0', '10199896999999482390', '0']; // Useful for debug\n\n        // Replace tokenIn delta for swaps with amount + slippage.\n        // This gives tolerance for limit incase amount out of exitPool is larger min,\n        const slippageAmountPositive = WeiPerEther.add(params.slippage);\n        params.exitTokens.forEach((exitToken, i) => {\n            const index = queryResult.assets\n                .map((elem) => elem.toLowerCase())\n                .indexOf(exitToken.toLowerCase());\n            if (index !== -1) {\n                queryResult.deltas[index] = BigNumber.from(\n                    params.expectedAmountsOut[i]\n                )\n                    .mul(slippageAmountPositive)\n                    .div(WeiPerEther)\n                    .toString();\n            }\n        });\n\n        // Creates limit array.\n        // Slippage set to 0. Already accounted for as swap used amounts out of pool with worst case slippage.\n        const limits = SwapsService.getLimitsForSlippage(\n            params.exitTokens, // tokensIn\n            params.finalTokensOut, // tokensOut\n            SwapType.SwapExactIn,\n            queryResult.deltas, // tempDeltas // Useful for debug\n            queryResult.assets,\n            '0'\n        );\n\n        // Creates fund management using internal balance as source of tokens\n        const funds: FundManagement = {\n            sender: params.exiter,\n            recipient: params.swapRecipient,\n            fromInternalBalance: true,\n            toInternalBalance: false,\n        };\n\n        const encodedBatchSwap = RelayerService.encodeBatchSwap({\n            swapType: SwapType.SwapExactIn,\n            swaps: queryResult.swaps,\n            assets: queryResult.assets,\n            funds: funds,\n            limits: limits.map((l) => l.toString()),\n            deadline: MaxUint256,\n            value: '0',\n            outputReferences: [],\n        });\n\n        // Return amounts from swap\n        const calls = [exitCall, encodedBatchSwap];\n        return {\n            function: 'multicall',\n            params: calls,\n            outputs: {\n                amountsOut: queryResult.returnAmounts,\n            },\n        };\n    }\n\n    /**\n     * swapUnwrapExactIn Finds swaps for tokenIn>wrapped Aave static tokens and chains with unwrap to underlying stable.\n     * @param {string[]} tokensIn - array to token addresses for swapping as tokens in.\n     * @param {string[]} aaveStaticTokens - array contains the addresses of the Aave static tokens that tokenIn will be swapped to. These will be unwrapped.\n     * @param {string[]} amountsIn - amounts to be swapped for each token in.\n     * @param {string[]} rates - The rate used to convert wrappedToken to underlying.\n     * @param {FundManagement} funds - Funding info for swap. Note - recipient should be relayer and sender should be caller.\n     * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n     * @param {UnwrapType} unwrapType - Type of unwrap to perform\n     * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n     * @returns Transaction data with calldata. Outputs.amountsOut has final amounts out of unwrapped tokens.\n     */\n    async swapUnwrapExactIn(\n        tokensIn: string[],\n        aaveStaticTokens: string[],\n        amountsIn: string[],\n        rates: string[],\n        funds: FundManagement,\n        slippage: string,\n        unwrapType: UnwrapType,\n        fetchPools: FetchPoolsInput = {\n            fetchPools: true,\n            fetchOnChain: false,\n        }\n    ): Promise<TransactionData> {\n        // Use swapsService to get swap info for tokensIn>wrappedTokens\n        const queryResult = await this.swapsService.queryBatchSwapWithSor({\n            tokensIn,\n            tokensOut: aaveStaticTokens,\n            swapType: SwapType.SwapExactIn,\n            amounts: amountsIn,\n            fetchPools,\n        });\n\n        // Gets limits array for tokensIn>wrappedTokens based on input slippage\n        const limits = SwapsService.getLimitsForSlippage(\n            tokensIn, // tokensIn\n            aaveStaticTokens, // tokensOut\n            SwapType.SwapExactIn,\n            queryResult.deltas,\n            queryResult.assets,\n            slippage\n        );\n\n        const calls = this.encodeSwapUnwrap(\n            aaveStaticTokens,\n            SwapType.SwapExactIn,\n            queryResult.swaps,\n            queryResult.assets,\n            funds,\n            limits,\n            unwrapType\n        );\n\n        const amountsUnwrapped = queryResult.returnAmounts.map(\n            (amountWrapped, i) =>\n                BigNumber.from(amountWrapped)\n                    .abs()\n                    .mul(rates[i])\n                    .div(WeiPerEther)\n        );\n\n        return {\n            function: 'multicall',\n            params: calls,\n            outputs: {\n                amountsOut: amountsUnwrapped,\n            },\n        };\n    }\n\n    /**\n     * swapUnwrapExactOut Finds swaps for tokenIn>wrapped Aave static tokens and chains with unwrap to underlying stable.\n     * @param {string[]} tokensIn - array to token addresses for swapping as tokens in.\n     * @param {string[]} aaveStaticTokens - array contains the addresses of the Aave static tokens that tokenIn will be swapped to. These will be unwrapped.\n     * @param {string[]} amountsUnwrapped - amounts of unwrapped tokens out.\n     * @param {string[]} rates - The rate used to convert wrappedToken to underlying.\n     * @param {FundManagement} funds - Funding info for swap. Note - recipient should be relayer and sender should be caller.\n     * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n     * @param {UnwrapType} unwrapType - Type of unwrap to perform\n     * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n     * @returns Transaction data with calldata. Outputs.amountsIn has the amounts of tokensIn.\n     */\n    async swapUnwrapExactOut(\n        tokensIn: string[],\n        aaveStaticTokens: string[],\n        amountsUnwrapped: string[],\n        rates: string[],\n        funds: FundManagement,\n        slippage: string,\n        unwrapType: UnwrapType,\n        fetchPools: FetchPoolsInput = {\n            fetchPools: true,\n            fetchOnChain: false,\n        }\n    ): Promise<TransactionData> {\n        const amountsWrapped = amountsUnwrapped.map((amountInwrapped, i) =>\n            BigNumber.from(amountInwrapped)\n                .mul(WeiPerEther)\n                .div(rates[i])\n                .toString()\n        );\n\n        // Use swapsService to get swap info for tokensIn>wrappedTokens\n        const queryResult = await this.swapsService.queryBatchSwapWithSor({\n            tokensIn,\n            tokensOut: aaveStaticTokens,\n            swapType: SwapType.SwapExactOut,\n            amounts: amountsWrapped,\n            fetchPools,\n        });\n\n        // Gets limits array for tokensIn>wrappedTokens based on input slippage\n        const limits = SwapsService.getLimitsForSlippage(\n            tokensIn, // tokensIn\n            aaveStaticTokens, // tokensOut\n            SwapType.SwapExactOut,\n            queryResult.deltas,\n            queryResult.assets,\n            slippage\n        );\n\n        const calls = this.encodeSwapUnwrap(\n            aaveStaticTokens,\n            SwapType.SwapExactOut,\n            queryResult.swaps,\n            queryResult.assets,\n            funds,\n            limits,\n            unwrapType\n        );\n\n        return {\n            function: 'multicall',\n            params: calls,\n            outputs: {\n                amountsIn: queryResult.returnAmounts.toString(),\n            },\n        };\n    }\n\n    /**\n     * Creates encoded multicalls using swap outputs as input amounts for token unwrap.\n     * @param wrappedTokens\n     * @param swapType\n     * @param swaps\n     * @param assets\n     * @param funds\n     * @param limits\n     * @param unwrapType\n     * @returns\n     */\n    encodeSwapUnwrap(\n        wrappedTokens: string[],\n        swapType: SwapType,\n        swaps: BatchSwapStep[],\n        assets: string[],\n        funds: FundManagement,\n        limits: BigNumberish[],\n        unwrapType: UnwrapType\n    ): string[] {\n        // Output of swaps (wrappedTokens) is used as input to unwrap\n        // Need indices of output tokens and outputReferences need to be made with those as key\n        const outputReferences: OutputReference[] = [];\n        const unwrapCalls: string[] = [];\n        wrappedTokens.forEach((wrappedToken, i) => {\n            // Find index of wrappedToken in asset array. This is used as ref in Relayer.\n            const index = assets.findIndex(\n                (token) => token.toLowerCase() === wrappedToken.toLowerCase()\n            );\n            // There may be cases where swap isn't possible for wrappedToken\n            if (index === -1) return;\n\n            const key = RelayerService.toChainedReference(i);\n\n            outputReferences.push({\n                index: index,\n                key: key,\n            });\n\n            // console.log(`Unwrapping ${wrappedToken} with amt: ${key.toHexString()}`);\n\n            switch (unwrapType) {\n                case 'aave':\n                    unwrapCalls.push(\n                        RelayerService.encodeUnwrapAaveStaticToken({\n                            staticToken: wrappedToken,\n                            sender: funds.recipient, // This should be relayer\n                            recipient: funds.sender, // This will be caller\n                            amount: key, // Use output of swap as input for unwrap\n                            toUnderlying: true,\n                            outputReferences: 0,\n                        })\n                    );\n                    break;\n                case 'yearn':\n                    unwrapCalls.push(\n                        RelayerService.encodeUnwrapYearnVaultToken({\n                            vaultToken: wrappedToken,\n                            sender: funds.recipient, // This should be relayer\n                            recipient: funds.sender, // This will be caller\n                            amount: key, // Use output of swap as input for unwrap\n                            outputReference: 0,\n                        })\n                    );\n                    break;\n            }\n        });\n\n        const encodedBatchSwap = RelayerService.encodeBatchSwap({\n            swapType: swapType,\n            swaps: swaps,\n            assets: assets,\n            funds: funds, // Note - this should have Relayer as recipient\n            limits: limits.map((l) => l.toString()),\n            deadline: MaxUint256,\n            value: '0',\n            outputReferences: outputReferences,\n        });\n\n        return [encodedBatchSwap, ...unwrapCalls];\n    }\n}\n","import { ConfigSdk } from '../types';\nimport { Network } from '../constants/network';\nimport { SwapsService } from '../swapsService';\nimport { RelayerService } from '../relayerService';\n\nexport class BalancerSDK {\n    network: Network;\n    rpcUrl: string;\n    swaps: SwapsService;\n    relayer: RelayerService;\n\n    constructor(config: ConfigSdk, swapService = SwapsService, relayerService = RelayerService) {\n        this.network = config.network;\n        this.rpcUrl = config.rpcUrl;\n        this.swaps = new swapService({\n            network: this.network,\n            rpcUrl: this.rpcUrl,\n            subgraphUrl: config.subgraphUrl\n        });\n        this.relayer = new relayerService(this.swaps, this.rpcUrl);\n    }\n}"],"names":["ONE","MAX_DEADLINE"],"mappings":";;;;;;;;;;IAGY;AAAZ,WAAY,kBAAkB;IAC5B,2DAAQ,CAAA;IACR,yGAA2B,CAAA;IAC3B,uGAA0B,CAAA;AAC5B,CAAC,EAJW,kBAAkB,KAAlB,kBAAkB,QAI7B;IAEW;AAAZ,WAAY,yBAAyB;IACnC,yEAAQ,CAAA;IACR,2GAAqB,CAAA;AACvB,CAAC,EAHW,yBAAyB,KAAzB,yBAAyB,QAGpC;IAEW;AAAZ,WAAY,kBAAkB;IAC5B,+GAAkC,CAAA;IAClC,yGAA2B,CAAA;IAC3B,yGAA2B,CAAA;AAC7B,CAAC,EAJW,kBAAkB,KAAlB,kBAAkB,QAI7B;MAEY,iBAAiB;;;;IAI5B;;KAEC;;AAED;;;;AAIO,0BAAQ,GAAG,CAAC,SAAyB,KAC1C,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;AAEzF;;;AAGO,yCAAuB,GAAG,MAC/B,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAEzF;;;;;AAKO,4CAA0B,GAAG,CAAC,SAAyB,EAAE,UAAwB,KACtF,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,EACnC,CAAC,kBAAkB,CAAC,2BAA2B,EAAE,SAAS,EAAE,UAAU,CAAC,CACxE,CAAC;AAEJ;;;;;AAKO,2CAAyB,GAAG,CAAC,YAA0B,EAAE,eAAuB,KACrF,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EACjC,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,YAAY,EAAE,eAAe,CAAC,CAC/E,CAAC;AAEJ;;;;;AAKO,8CAA4B,GAAG,CAAC,WAAyB,EAAE,cAAsB,KACtF,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EACjC,CAAC,kBAAkB,CAAC,8BAA8B,EAAE,WAAW,EAAE,cAAc,CAAC,CACjF,CAAC;AAEJ;;;;AAIO,4CAA0B,GAAG,CAAC,WAAyB,KAC5D,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC,kBAAkB,CAAC,2BAA2B,EAAE,WAAW,CAAC,CAAC,CAAC;AAEhH;;;;;AAKO,4CAA0B,GAAG,CAAC,UAA0B,EAAE,cAA4B,KAC3F,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,EACnC,CAAC,kBAAkB,CAAC,2BAA2B,EAAE,UAAU,EAAE,cAAc,CAAC,CAC7E;;ICvFO;AAAZ,WAAY,oBAAoB;IAC9B,+DAAQ,CAAA;IACR,6GAA2B,CAAA;IAC3B,2GAA0B,CAAA;IAC1B,qHAA+B,CAAA;AACjC,CAAC,EALW,oBAAoB,KAApB,oBAAoB,QAK/B;IAEW;AAAZ,WAAY,oBAAoB;IAC9B,mHAAkC,CAAA;IAClC,6GAA2B,CAAA;IAC3B,6GAA2B,CAAA;IAC3B,yGAAyB,CAAA;AAC3B,CAAC,EALW,oBAAoB,KAApB,oBAAoB,QAK/B;MAEY,mBAAmB;;;;IAI9B;;KAEC;;AAED;;;;AAIO,4BAAQ,GAAG,CAAC,SAAyB,KAC1C,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC,oBAAoB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;AAE3F;;;;;AAKO,8CAA0B,GAAG,CAAC,SAAyB,EAAE,UAAwB,KACtF,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,EACnC,CAAC,oBAAoB,CAAC,2BAA2B,EAAE,SAAS,EAAE,UAAU,CAAC,CAC1E,CAAC;AAEJ;;;;;AAKO,6CAAyB,GAAG,CAAC,YAA0B,EAAE,eAAuB,KACrF,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EACjC,CAAC,oBAAoB,CAAC,0BAA0B,EAAE,YAAY,EAAE,eAAe,CAAC,CACjF,CAAC;AAEJ;;;;AAIO,iDAA6B,GAAG,CAAC,YAA0B,KAChE,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,SAAS,CAAC,EACtB,CAAC,oBAAoB,CAAC,+BAA+B,EAAE,YAAY,CAAC,CACrE,CAAC;AAEJ;;;;;AAKO,gDAA4B,GAAG,CAAC,WAAyB,EAAE,cAAsB,KACtF,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EACjC,CAAC,oBAAoB,CAAC,8BAA8B,EAAE,WAAW,EAAE,cAAc,CAAC,CACnF,CAAC;AAEJ;;;;AAIO,8CAA0B,GAAG,CAAC,WAAyB,KAC5D,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC,oBAAoB,CAAC,2BAA2B,EAAE,WAAW,CAAC,CAAC,CAAC;AAElH;;;;;AAKO,8CAA0B,GAAG,CAAC,UAA0B,EAAE,cAA4B,KAC3F,eAAe,CAAC,MAAM,CACpB,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,EACnC,CAAC,oBAAoB,CAAC,2BAA2B,EAAE,UAAU,EAAE,cAAc,CAAC,CAC/E,CAAC;MAGO,kBAAkB;;;;IAI7B;;KAEC;;AAED;;;;AAIO,wCAAqB,GAAG,MAC7B,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,CAAC;;ACxGzF;AACA;AACA,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAE9B;;;;;SAKgB,mBAAmB,CAAC,OAAoB;;;IAGtD,IAAI,OAAO,CAAC,MAAM,IAAI,iBAAiB,EAAE;QACvC,OAAO,KAAK,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAACA,WAAG,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;KAClE;IAED,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,KAAK,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;IACvE,IAAI,GAAG,CAAC,EAAE,CAACA,WAAG,CAAC;QAAE,OAAO,OAAO,CAAC;IAEhC,MAAM,iBAAiB,GAAG,EAAE,CAAC;IAC7B,IAAI,aAAa,GAAG,IAAI,CAAC;IACzB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QACnD,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9B,iBAAiB,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAACA,WAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5D,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;SAC7D;aAAM;YACL,iBAAiB,CAAC,KAAK,CAAC,GAAGA,WAAG,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACnD;KACF;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAED;;;;;MAKa,mBAAmB,GAAG,CAAC,OAAuB;IACzD,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,KAAgB,EAAE,MAAM,KAAK,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;IAC1F,OAAO,WAAW,CAAC,EAAE,CAACA,WAAG,CAAC,CAAC;AAC7B;;AC5CA,IAAI,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC;AACzD,IAAI,MAAM,GAAG,kBAAkB,CAAC;AAChC,SAAS,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE;AACvC,IAAI,IAAI,SAAS,EAAE;AACnB,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,IAAI,YAAY,EAAE;AACtB,QAAQ,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;AAChC,KAAK;AACL,IAAI,IAAI,QAAQ,GAAG,OAAO,OAAO,KAAK,UAAU,GAAG,OAAO,EAAE,GAAG,OAAO,CAAC;AACvE,IAAI,IAAI,KAAK,GAAG,QAAQ,GAAG,MAAM,GAAG,IAAI,GAAG,QAAQ,GAAG,MAAM,CAAC;AAC7D,IAAI,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AAC3B;;ACRA;;;;;MAKa,WAAW,GAAG,CACzB,MAAc;IAEd,OAAO;QACL,OAAO,EAAE,cAAc,CAAC,MAAM,CAAC;QAC/B,cAAc,EAAE,qBAAqB,CAAC,MAAM,CAAC;QAC7C,KAAK,EAAE,YAAY,CAAC,MAAM,CAAC;KAC5B,CAAC;AACJ,EAAE;AAEF;;;;;MAKa,cAAc,GAAG,CAAC,MAAc;IAC3C,SAAS,CAAC,MAAM,CAAC,MAAM,KAAK,EAAE,EAAE,uBAAuB,CAAC,CAAC;IACzD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC7B,EAAE;AAEF;;;;;MAKa,qBAAqB,GAAG,CAAC,MAAc;IAClD,SAAS,CAAC,MAAM,CAAC,MAAM,KAAK,EAAE,EAAE,uBAAuB,CAAC,CAAC;;IAGzD,MAAM,kBAAkB,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,SAAS,CAAC,kBAAkB,GAAG,CAAC,EAAE,6BAA6B,CAAC,CAAC;IAEjE,OAAO,kBAAkB,CAAC;AAC5B,EAAE;AAEF;;;;;MAKa,YAAY,GAAG,CAAC,MAAc;IACzC,SAAS,CAAC,MAAM,CAAC,MAAM,KAAK,EAAE,EAAE,uBAAuB,CAAC,CAAC;IACzD,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACjD;;ACpDA,MAAM,kBAAkB,GAA2B;IACjD,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,uBAAuB;IAC9B,KAAK,EAAE,kBAAkB;IACzB,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,uBAAuB;IAC9B,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,yBAAyB;IAChC,KAAK,EAAE,yBAAyB;IAChC,KAAK,EAAE,aAAa;IACpB,KAAK,EAAE,kBAAkB;IACzB,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,mBAAmB;IAC1B,KAAK,EAAE,oBAAoB;IAC3B,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,mBAAmB;IAC1B,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,0BAA0B;IACjC,KAAK,EAAE,0BAA0B;IACjC,KAAK,EAAE,6BAA6B;IACpC,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,qBAAqB;IAC5B,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,sBAAsB;IAC7B,KAAK,EAAE,sBAAsB;IAC7B,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,oBAAoB;IAC3B,KAAK,EAAE,mBAAmB;IAC1B,KAAK,EAAE,uBAAuB;IAC9B,KAAK,EAAE,iCAAiC;IACxC,KAAK,EAAE,mCAAmC;IAC1C,KAAK,EAAE,sBAAsB;IAC7B,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,+BAA+B;IACtC,KAAK,EAAE,4BAA4B;IACnC,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,yBAAyB;IAChC,KAAK,EAAE,qBAAqB;IAC5B,KAAK,EAAE,6CAA6C;IACpD,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,iCAAiC;IACxC,KAAK,EAAE,uBAAuB;IAC9B,KAAK,EAAE,0BAA0B;IACjC,KAAK,EAAE,qBAAqB;IAC5B,KAAK,EAAE,sBAAsB;IAC7B,KAAK,EAAE,mBAAmB;IAC1B,KAAK,EAAE,oCAAoC;IAC3C,KAAK,EAAE,2BAA2B;IAClC,KAAK,EAAE,2BAA2B;IAClC,KAAK,EAAE,mCAAmC;IAC1C,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,oBAAoB;IAC3B,KAAK,EAAE,QAAQ;IACf,KAAK,EAAE,sBAAsB;IAC7B,KAAK,EAAE,2BAA2B;IAClC,KAAK,EAAE,4BAA4B;IACnC,KAAK,EAAE,sBAAsB;IAC7B,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,kCAAkC;IACzC,KAAK,EAAE,gCAAgC;IACvC,KAAK,EAAE,4BAA4B;IACnC,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,iCAAiC;IACxC,KAAK,EAAE,+BAA+B;IACtC,KAAK,EAAE,kCAAkC;IACzC,KAAK,EAAE,sCAAsC;IAC7C,KAAK,EAAE,gCAAgC;IACvC,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,2BAA2B;IAClC,KAAK,EAAE,iCAAiC;IACxC,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,yBAAyB;IAChC,KAAK,EAAE,6BAA6B;IACpC,KAAK,EAAE,uBAAuB;IAC9B,KAAK,EAAE,qBAAqB;IAC5B,KAAK,EAAE,mBAAmB;IAC1B,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,sBAAsB;IAC7B,KAAK,EAAE,uBAAuB;IAC9B,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,0BAA0B;IACjC,KAAK,EAAE,2BAA2B;IAClC,KAAK,EAAE,mBAAmB;IAC1B,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,2BAA2B;IAClC,KAAK,EAAE,+BAA+B;IACtC,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,2BAA2B;IAClC,KAAK,EAAE,kBAAkB;IACzB,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,yBAAyB;IAChC,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,sBAAsB;IAC7B,KAAK,EAAE,0BAA0B;IACjC,KAAK,EAAE,oBAAoB;IAC3B,KAAK,EAAE,yBAAyB;IAChC,KAAK,EAAE,uBAAuB;IAC9B,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,iCAAiC;IACxC,KAAK,EAAE,8BAA8B;IACrC,KAAK,EAAE,oCAAoC;IAC3C,KAAK,EAAE,oCAAoC;CAC5C,CAAC;MAEW,cAAc;;;;IAIzB;;KAEC;;AAEM,0BAAW,GAAG,CAAC,KAAa;IACjC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAAE,OAAO,KAAK,CAAC;IAE1C,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAC5C,OAAO,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF;;;;;AAKO,6BAAc,GAAG,CAAC,KAAa;IACpC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IACrE,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5C,MAAM,WAAW,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;IAElD,IAAI,CAAC,WAAW;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAE1D,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAEF;;;;;AAKO,gCAAiB,GAAG,CAAC,KAAa;IACvC,IAAI;QACF,OAAO,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;KAC7C;IAAC,MAAM;QACN,OAAO,KAAK,CAAC;KACd;AACH,CAAC,CAAC;AAEF;;;;AAIO,8BAAe,GAAG,CAAC,KAAa,KAAc,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAEvG;;;;;AAKO,0BAAW,GAAG,CAAC,KAAa;IACjC,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,OAAO,KAAK,KAAK,CAAC,CAAC;IAEjG,IAAI,CAAC,YAAY;QAAE,MAAM,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAE1D,OAAO,OAAO,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;AAClC,CAAC;;AC7LI,eAAe,gBAAgB,CAAC,OAAgB;IACrD,IAAI,OAAO,OAAO,IAAI,QAAQ;QAAE,OAAO,OAAO,CAAC;IAC/C,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;QAAE,OAAO,OAAO,CAAC,UAAU,EAAE,CAAC;IAC1D,IAAI,OAAO,CAAC,OAAO;QAAE,OAAO,OAAO,CAAC,OAAO,CAAC;IAC5C,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;AACpD,CAAC;IAEW;AAAZ,WAAY,aAAa;IACvB,sCAAqB,CAAA;IACrB,sCAAqB,CAAA;IACrB,8BAAa,CAAA;IACb,wCAAuB,CAAA;IACvB,0DAAyC,CAAA;AAC3C,CAAC,EANW,aAAa,KAAb,aAAa,QAMxB;MAEY,oBAAoB;;;;IAI/B;;KAEC;;AAEM,gDAA2B,GAAG,CAAC,QAAgB,EAAE,QAAsB,EAAE,SAAiB;IAC/F,MAAM,eAAe,GAAG,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;IAC9C,MAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5B,OAAO,GAAG,QAAQ,GAAG,eAAe,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC;AAC1E,CAAE,CAAA;AAEK,0CAAqB,GAAG,CAC7B,SAAmB,EACnB,IAA8B,EAC9B,aAAsB,EACtB,eAAuB,EACvB,QAAuB,EACvB,KAAoB,KAEpB,oBAAoB,CAAC,oBAAoB,CACvC,aAAa,CAAC,QAAQ,EACtB,SAAS,EACT,IAAI,EACJ,aAAa,EACb,eAAe,EACf,QAAQ,EACR,KAAK,CACL,CAAA;AAEG,0CAAqB,GAAG,CAC7B,SAAmB,EACnB,IAA8B,EAC9B,aAAsB,EACtB,eAAuB,EACvB,QAAuB,EACvB,KAAoB,KAEpB,oBAAoB,CAAC,oBAAoB,CACvC,aAAa,CAAC,QAAQ,EACtB,SAAS,EACT,IAAI,EACJ,aAAa,EACb,eAAe,EACf,QAAQ,EACR,KAAK,CACL,CAAA;AAEG,0CAAqB,GAAG,CAC7B,SAAmB,EACnB,IAA8B,EAC9B,aAAsB,EACtB,eAAuB,EACvB,QAAuB,EACvB,KAAoB,KAEpB,oBAAoB,CAAC,oBAAoB,CACvC,aAAa,CAAC,IAAI,EAClB,SAAS,EACT,IAAI,EACJ,aAAa,EACb,eAAe,EACf,QAAQ,EACR,KAAK,CACL,CAAA;AAEG,+CAA0B,GAAG,CAClC,SAAmB,EACnB,IAA8B,EAC9B,aAAsB,EACtB,eAAuB,EACvB,QAAuB,EACvB,KAAoB,KAEpB,oBAAoB,CAAC,oBAAoB,CACvC,aAAa,CAAC,SAAS,EACvB,SAAS,EACT,IAAI,EACJ,aAAa,EACb,eAAe,EACf,QAAQ,EACR,KAAK,CACL,CAAA;AAEG,wDAAmC,GAAG,CAC3C,SAAmB,EACnB,IAA8B,EAC9B,aAAsB,EACtB,eAAuB,EACvB,QAAuB,EACvB,KAAoB,KAEpB,oBAAoB,CAAC,oBAAoB,CACvC,aAAa,CAAC,kBAAkB,EAChC,SAAS,EACT,IAAI,EACJ,aAAa,EACb,eAAe,EACf,QAAQ,EACR,KAAK,CACL,CAAA;AAEG,yCAAoB,GAAG,OAC5B,IAAmB,EACnB,SAAmB,EACnB,IAA8B,EAC9B,aAAsB,EACtB,eAAuB,EACvB,WAAyBC,UAAY,EACrC,KAAoB;IAEpB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;IAC1D,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC5C,KAAK,IAAI,MAAM,SAAS,CAAC,YAAY,CAAC,WAAW,CAAC,CAAiB,CAAC;KACrE;IAED,MAAM,MAAM,GAAG;QACb,IAAI,EAAE,mBAAmB;QACzB,OAAO,EAAE,GAAG;QACZ,OAAO;QACP,iBAAiB,EAAE,SAAS,CAAC,OAAO;KACrC,CAAC;IAEF,MAAM,KAAK,GAAG;QACZ,CAAC,IAAI,GAAG;YACN,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE;YACnC,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE;YACnC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE;SACtC;KACF,CAAC;IAEF,MAAM,KAAK,GAAG;QACZ,QAAQ,EAAE,eAAe;QACzB,MAAM,EAAE,MAAM,gBAAgB,CAAC,aAAa,CAAC;QAC7C,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;QACvB,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE;KAC9B,CAAC;IAEF,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AACnD,CAAE;;MClKS,UAAU,GAAG,OACxB,KAAe,EACf,KAA+B,EAC/B,OAAgB,EAChB,MAAoB,EACpB,WAAyBA,UAAY,EACrC,KAAoB;IAEpB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;IACtD,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;IAE9C,IAAI,CAAC,KAAK;QAAE,KAAK,IAAI,MAAM,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAiB,CAAC;IAEvE,MAAM,MAAM,GAAG;QACb,IAAI,EAAE,MAAM,KAAK,CAAC,IAAI,EAAE;QACxB,OAAO,EAAE,GAAG;QACZ,OAAO;QACP,iBAAiB,EAAE,KAAK,CAAC,OAAO;KACjC,CAAC;IAEF,MAAM,KAAK,GAAG;QACZ,MAAM,EAAE;YACN,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;YACpC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE;SACtC;KACF,CAAC;IAEF,MAAM,KAAK,GAAG;QACZ,KAAK,EAAE,YAAY;QACnB,OAAO,EAAE,MAAM,gBAAgB,CAAC,OAAO,CAAC;QACxC,KAAK,EAAE,MAAM;QACb,KAAK;QACL,QAAQ;KACT,CAAC;IAEF,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACnE,OAAO,EAAE,GAAG,cAAc,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;AAC5G;;AC3CA,MAAM,SAAS,GAAG,CAAC,MAAc,EAAE,MAAc,MAAc,MAAM,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAErH,MAAM,eAAe,GAAG,CAAC,MAAmB,KAC1C,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,WAAW,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;MAE9D,YAAY;IAIvB,YAAY,WAAmB;QAHf,QAAG,GAAW,WAAW,CAAC;;;;;;QAc1C,UAAK,GAAG,CAAC,KAAa,KAAc,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;;;;;;QAO1E,WAAM,GAAG,CAAC,KAAa,KAAc,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;;;;;;;;QAS5E,qBAAgB,GAAG,CAAC,KAAa,MAAc,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QA1BpF,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;KACrC;;;;;;;;;;;;;;;;;;IA4CD,UAAU,CAAC,MAAgB,EAAE,GAAG,MAAmB;QACjD,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,MAAM,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC,CAAC;;QAG9F,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAEtD,MAAM,SAAS,GAAG,eAAe,CAAC,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,CAA6B,CAAC;QACxF,MAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1F,MAAM,CAAC,YAAY,EAAE,GAAG,YAAY,CAAC,GAAG,eAAe,CAAC,eAAe,CAA+B,CAAC;;QAGvG,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;cAC1C,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;cACpE,YAAY,CAAC;QACjB,OAAO,CAAC,YAAY,EAAE,GAAG,YAAY,CAAC,CAAC;KACxC;;AAzDM,oBAAO,GAAG,CAAC,QAAgB,EAAE,QAAgB,KAAc,UAAU,CAAC,QAAQ,CAAC,KAAK,UAAU,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCZpG,WAAW;IAEpB,aAAa,OAAO,CAAC,mBAA2B,EAAE,QAAyB;QACvE,MAAM,oBAAoB,GAAG,IAAI,QAAQ,CAAC,mBAAmB,EAAE,qBAAqB,EAAE,QAAQ,CAAC,CAAC;QAEhG,MAAM,IAAI,GAAG,MAAM,oBAAoB,CAAC,OAAO,EAAE,CAAC;QAClD,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;KAC1B;;;MCJQ,aAAa,GAAG,CAAC,QAAgB,EAAE,QAAgB,KAC5D,UAAU,CAAC,QAAQ,CAAC,KAAK,UAAU,CAAC,QAAQ;;ICLpC;AAAZ,WAAY,kBAAkB;IAC1B,yEAAe,CAAA;IACf,yFAAmB,CAAA;IACnB,2EAAY,CAAA;AAChB,CAAC,EAJW,kBAAkB,KAAlB,kBAAkB,QAI7B;AAoBD;IAEY;AAAZ,WAAY,iBAAiB;IACzB,+EAAmB,CAAA;IACnB,iFAAgB,CAAA;IAChB,iFAAgB,CAAA;IAChB,iFAAgB,CAAA;AACpB,CAAC,EALW,iBAAiB,KAAjB,iBAAiB,QAK5B;IAUW;AAAZ,WAAY,iBAAiB;IACzB,iEAAY,CAAA;IACZ,+DAAW,CAAA;IACX,6DAAU,CAAA;AACd,CAAC,EAJW,iBAAiB,KAAjB,iBAAiB;;IC3CjB;AAAZ,WAAY,QAAQ;IAChB,qDAAW,CAAA;IACX,uDAAY,CAAA;AAChB,CAAC,EAHW,QAAQ,KAAR,QAAQ;;ACUpB;;;;;;;;AAQO,eAAe,cAAc,CAChC,aAAuB,EACvB,QAAkB,EAClB,KAAsB,EACtB,MAAgB;IAEhB,MAAM,KAAK,GAAmB;QAC1B,MAAM,EAAE,WAAW;QACnB,SAAS,EAAE,WAAW;QACtB,mBAAmB,EAAE,KAAK;QAC1B,iBAAiB,EAAE,KAAK;KAC3B,CAAC;IAEF,IAAI;QACA,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,cAAc,CAC7C,QAAQ,EACR,KAAK,EACL,MAAM,EACN,KAAK,CACR,CAAC;QACF,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,CAAe,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;KACxD;IAAC,OAAO,GAAG,EAAE;QACV,MAAM,8BAA8B,GAAG,EAAE,CAAC;KAC7C;AACL,CAAC;AAED;;;AAGO,eAAe,qBAAqB,CACvC,GAAQ,EACR,aAAuB,EACvB,YAA+B;IAE/B,IAAI,YAAY,CAAC,UAAU,CAAC,UAAU;QAClC,MAAM,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,YAAY,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IAEnE,MAAM,KAAK,GAAsB,EAAE,CAAC;IACpC,MAAM,UAAU,GAAe,EAAE,CAAC;;IAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnD,MAAM,IAAI,GAAG,MAAM,cAAc,CAC7B,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EACxB,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,EACzB,YAAY,CAAC,QAAQ,EACrB,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAClC,GAAG,CACN,CAAC;QACF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KACxC;;IAGD,MAAM,YAAY,GAAG,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAEnD,MAAM,YAAY,GACd,YAAY,CAAC,QAAQ,KAAK,QAAQ,CAAC,WAAW;UACxC,YAAY,CAAC,SAAS;UACtB,YAAY,CAAC,QAAQ,CAAC;IAChC,MAAM,aAAa,GAAa,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtE,IAAI,MAAM,GAAmB,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1E,IAAI;;QAEA,MAAM,GAAG,MAAM,cAAc,CACzB,aAAa,EACb,YAAY,CAAC,QAAQ,EACrB,YAAY,CAAC,KAAK,EAClB,YAAY,CAAC,MAAM,CACtB,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,YAAY,CAAC,OAAO,CAChB,CAAC,CAAC,EAAE,CAAC;;gBACD,QAAC,aAAa,CAAC,CAAC,CAAC;oBACb,MAAA,MAAM,CACF,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAC/C,CAAC,QAAQ,EAAE,mCAAI,IAAI,CAAC,QAAQ,EAAE,EAAC;aAAA,CAC3C,CAAC;SACL;KACJ;IAAC,OAAO,GAAG,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,iCAAiC,GAAG,EAAE,CAAC,CAAC;KACzD;IAED,OAAO;QACH,aAAa;QACb,KAAK,EAAE,YAAY,CAAC,KAAK;QACzB,MAAM,EAAE,YAAY,CAAC,MAAM;QAC3B,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;KAC1C,CAAC;AACN,CAAC;AAED;;;;AAIA,eAAe,cAAc,CACzB,OAAe,EACf,QAAgB,EAChB,QAAkB,EAClB,MAAc,EACd,GAAQ;IAER,MAAM,WAAW,GACb,QAAQ,KAAK,QAAQ,CAAC,WAAW;UAC3B,SAAS,CAAC,WAAW;UACrB,SAAS,CAAC,YAAY,CAAC;IACjC,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,QAAQ,CAC/B,OAAO,CAAC,WAAW,EAAE,EACrB,QAAQ,CAAC,WAAW,EAAE,EACtB,WAAW,EACX,MAAM,CACT,CAAC;IACF,OAAO,QAAQ,CAAC;AACpB,CAAC;AAED;;;AAGA,SAAS,UAAU,CACf,UAAsB,EACtB,KAAwB;;IAGxB,MAAM,aAAa,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;;IAGtD,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ;YAClB,QAAQ,CAAC,YAAY,GAAG,aAAa,CAAC,OAAO,CACzC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CACvC,CAAC;YACF,QAAQ,CAAC,aAAa,GAAG,aAAa,CAAC,OAAO,CAC1C,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CACxC,CAAC;SACL,CAAC,CAAC;KACN,CAAC,CAAC;;IAGH,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;IAClC,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC;AAC1D;;AChKO,MAAM,gBAAgB,GAAkC;IAC3D,KAAK,EAAE,4CAA4C;IACnD,KAAK,EAAE,4CAA4C;CACtD;;ACGD;;;;;;;;;;SAUgB,oBAAoB,CAChC,QAAkB,EAClB,SAAmB,EACnB,QAAkB,EAClB,MAAsB,EACtB,MAAgB,EAChB,QAAsB;;;;;IAMtB,MAAM,MAAM,GAAgB,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEhE,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;QACpB,IAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,IAAI,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,EAAE;;YAExD,MAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACjE,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,KAAK,QAAQ,CAAC,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7J;QAED,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,EAAE;;YAE5D,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,KAAK,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5J;KACJ,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AACla,YAAY;IAKrB,YAAY,MAAiB;QACzB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5B,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;KAClE;IAED,OAAO,oBAAoB,CACvB,QAAkB,EAClB,SAAmB,EACnB,QAAkB,EAClB,MAAgB,EAChB,MAAgB,EAChB,QAAgB;;QAGhB,MAAM,MAAM,GAAG,oBAAoB,CAC/B,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,MAAM,EACN,MAAM,EACN,QAAQ,CACX,CAAC;QAEF,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC1C;;;;;;;IAQD,MAAM,UAAU,CACZ,YAAgC,EAAE,EAClC,SAAS,GAAG,IAAI;QAEhB,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;KACpD;;;;;;;;;;;IAYD,MAAM,cAAc,CAChB,SAAuD;;QAGvD,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,MAAM,aAAa,GAAG,IAAI,QAAQ,CAC9B,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EACpC,QAAQ,EACR,QAAQ,CACX,CAAC;QAEF,OAAO,MAAM,cAAc,CACvB,aAAa,EACb,SAAS,CAAC,IAAI,EACd,SAAS,CAAC,KAAK,EACf,SAAS,CAAC,MAAM,CACnB,CAAC;KACL;;;;;;;;;;;IAYD,MAAM,qBAAqB,CACvB,YAA+B;;QAG/B,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,MAAM,aAAa,GAAG,IAAI,QAAQ,CAC9B,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EACpC,QAAQ,EACR,QAAQ,CACX,CAAC;QAEF,OAAO,MAAM,qBAAqB,CAC9B,IAAI,CAAC,GAAG,EACR,aAAa,EACb,YAAY,CACf,CAAC;KACL;;;ICvHO;AAAZ,WAAY,OAAO;IACf,2CAAW,CAAA;IACX,2CAAW,CAAA;IACX,2CAAW,CAAA;IACX,iDAAS,CAAA;IACT,wCAAU,CAAA;IACV,6CAAa,CAAA;IACb,iDAAgB,CAAA;IAChB,mDAAiB,CAAA;IACjB,yCAAY,CAAA;AAChB,CAAC,EAVW,OAAO,KAAP,OAAO;;MCEN,aAAa,GAAG;IACzB,CAAC,OAAO,CAAC,OAAO,GACZ,mEAAmE;IACvE,CAAC,OAAO,CAAC,KAAK,GACV,0EAA0E;IAC9E,CAAC,OAAO,CAAC,KAAK,GACV,yEAAykBvF,cAAc;IAKvB,YAAY,YAA0B,EAAE,MAAc;QAClD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,eAAe,CAAC,MAA4B;QAC/C,MAAM,cAAc,GAAG,IAAI,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAExD,OAAO,cAAc,CAAC,kBAAkB,CAAC,WAAW,EAAE;YAClD,MAAM,CAAC,QAAQ;YACf,MAAM,CAAC,KAAK;YACZ,MAAM,CAAC,MAAM;YACb,MAAM,CAAC,KAAK;YACZ,MAAM,CAAC,MAAM;YACb,MAAM,CAAC,QAAQ;YACf,MAAM,CAAC,KAAK;YACZ,MAAM,CAAC,gBAAgB;SAC1B,CAAC,CAAC;KACN;IAED,OAAO,cAAc,CAAC,MAA2B;QAC7C,MAAM,cAAc,GAAG,IAAI,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAExD,OAAO,cAAc,CAAC,kBAAkB,CAAC,UAAU,EAAE;YACjD,MAAM,CAAC,MAAM;YACb,MAAM,CAAC,QAAQ;YACf,MAAM,CAAC,MAAM;YACb,MAAM,CAAC,SAAS;YAChB,MAAM,CAAC,eAAe;YACtB,MAAM,CAAC,gBAAgB;SAC1B,CAAC,CAAC;KACN;IAED,OAAO,2BAA2B,CAC9B,MAAwC;QAExC,MAAM,mBAAmB,GAAG,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;QAE3D,OAAO,mBAAmB,CAAC,kBAAkB,CAAC,uBAAuB,EAAE;YACnE,MAAM,CAAC,WAAW;YAClB,MAAM,CAAC,MAAM;YACb,MAAM,CAAC,SAAS;YAChB,MAAM,CAAC,MAAM;YACb,MAAM,CAAC,YAAY;YACnB,MAAM,CAAC,gBAAgB;SAC1B,CAAC,CAAC;KACN;IAED,OAAO,2BAA2B,CAC9B,MAAwC;QAExC,MAAM,oBAAoB,GAAG,IAAI,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAE7D,OAAO,oBAAoB,CAAC,kBAAkB,CAC1C,uBAAuB,EACvB;YACI,MAAM,CAAC,UAAU;YACjB,MAAM,CAAC,MAAM;YACb,MAAM,CAAC,SAAS;YAChB,MAAM,CAAC,MAAM;YACb,MAAM,CAAC,eAAe;SACzB,CACJ,CAAC;KACL;IAED,OAAO,kBAAkB,CAAC,GAAiB;;QAEvC,MAAM,YAAY,GAAG,KACjB,cAAc,CAAC,wBACnB,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,cAAc,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC;QACrE,OAAO,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAChD;IAED,OAAO,iBAAiB,CAAC,MAAoB;QACzC,MAAM,EACF,MAAM,EACN,aAAa,EACb,QAAQ,EACR,iBAAiB,EACjB,MAAM,EACN,QAAQ,EACR,MAAM,EACN,SAAS,EACT,gBAAgB,GACnB,GAAG,MAAM,CAAC;QAEX,MAAM,eAAe,GAAoB;YACrC,MAAM;YACN,aAAa;YACb,QAAQ;YACR,iBAAiB;SACpB,CAAC;QAEF,MAAM,aAAa,GAAwB;YACvC,MAAM;YACN,QAAQ;YACR,MAAM;YACN,SAAS;YACT,gBAAgB;YAChB,eAAe;SAClB,CAAC;QAEF,MAAM,WAAW,GAAG,cAAc,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QACjE,OAAO,WAAW,CAAC;KACtB;;;;;;;;;;;;;;;IAgBD,MAAM,oBAAoB,CACtB,MAA6B;QAE7B,MAAM,sBAAsB,GAAG,WAAW,CAAC,GAAG,CAC1C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAClC,CAAC;;QAEF,MAAM,aAAa,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,KACpD,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;aACd,GAAG,CAAC,sBAAsB,CAAC;aAC3B,GAAG,CAAC,WAAW,CAAC;aAChB,QAAQ,EAAE,CAClB,CAAC;;QAGF,MAAM,gBAAgB,GAAsB,EAAE,CAAC;QAC/C,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;YAC/B,MAAM,GAAG,GAAG,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACjD,gBAAgB,CAAC,IAAI,CAAC;gBAClB,KAAK,EAAE,CAAC;gBACR,GAAG,EAAE,GAAG;aACX,CAAC,CAAC;SACN,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,cAAc,CAAC,iBAAiB,CAAC;YAC9C,MAAM,EAAE,MAAM,CAAC,UAAU;YACzB,aAAa;YACb,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,iBAAiB,EAAE,IAAI;YACvB,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,QAAQ,EAAE,CAAC;YACX,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,SAAS,EAAE,MAAM,CAAC,MAAM;YACxB,gBAAgB,EAAE,gBAAgB;YAClC,eAAe,EAAE,EAAqB;SACzC,CAAC,CAAC;;;;QAKH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC;YAC9D,QAAQ,EAAE,MAAM,CAAC,UAAU;YAC3B,SAAS,EAAE,MAAM,CAAC,cAAc;YAChC,QAAQ,EAAE,QAAQ,CAAC,WAAW;YAC9B,OAAO,EAAE,aAAa;YACtB,UAAU,EAAE,MAAM,CAAC,UAAU;SAChC,CAAC,CAAC;;QAGH,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI;YAC3B,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACpD,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAI,KAAK,KAAK,CAAC,CAAC;gBACZ,IAAI,CAAC,MAAM,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;SAC5D,CAAC,CAAC;;;;QAMH,MAAM,sBAAsB,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAChE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM;iBAC3B,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC;iBACjC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;YACtC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBACd,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,IAAI,CACtC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAC/B;qBACI,GAAG,CAAC,sBAAsB,CAAC;qBAC3B,GAAG,CAAC,WAAW,CAAC;qBAChB,QAAQ,EAAE,CAAC;aACnB;SACJ,CAAC,CAAC;;;QAIH,MAAM,MAAM,GAAG,YAAY,CAAC,oBAAoB,CAC5C,MAAM,CAAC,UAAU;QACjB,MAAM,CAAC,cAAc;QACrB,QAAQ,CAAC,WAAW,EACpB,WAAW,CAAC,MAAM;QAClB,WAAW,CAAC,MAAM,EAClB,GAAG,CACN,CAAC;;QAGF,MAAM,KAAK,GAAmB;YAC1B,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,SAAS,EAAE,MAAM,CAAC,aAAa;YAC/B,mBAAmB,EAAE,IAAI;YACzB,iBAAiB,EAAE,KAAK;SAC3B,CAAC;QAEF,MAAM,gBAAgB,GAAG,cAAc,CAAC,eAAe,CAAC;YACpD,QAAQ,EAAE,QAAQ,CAAC,WAAW;YAC9B,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,MAAM,EAAE,WAAW,CAAC,MAAM;YAC1B,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACvC,QAAQ,EAAE,UAAU;YACpB,KAAK,EAAE,GAAG;YACV,gBAAgB,EAAE,EAAE;SACvB,CAAC,CAAC;;QAGH,MAAM,KAAK,GAAG,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAC3C,OAAO;YACH,QAAQ,EAAE,WAAW;YACrB,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACL,UAAU,EAAE,WAAW,CAAC,aAAa;aACxC;SACJ,CAAC;KACL;;;;;;;;;;;;;IAcD,MAAM,iBAAiB,CACnB,QAAkB,EAClB,gBAA0B,EAC1B,SAAmB,EACnB,KAAe,EACf,KAAqB,EACrB,QAAgB,EAChB,UAAsB,EACtB,aAA8B;QAC1B,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,KAAK;KACtB;;QAGD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC;YAC9D,QAAQ;YACR,SAAS,EAAE,gBAAgB;YAC3B,QAAQ,EAAE,QAAQ,CAAC,WAAW;YAC9B,OAAO,EAAE,SAAS;YAClB,UAAU;SACb,CAAC,CAAC;;QAGH,MAAM,MAAM,GAAG,YAAY,CAAC,oBAAoB,CAC5C,QAAQ;QACR,gBAAgB;QAChB,QAAQ,CAAC,WAAW,EACpB,WAAW,CAAC,MAAM,EAClB,WAAW,CAAC,MAAM,EAClB,QAAQ,CACX,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAC/B,gBAAgB,EAChB,QAAQ,CAAC,WAAW,EACpB,WAAW,CAAC,KAAK,EACjB,WAAW,CAAC,MAAM,EAClB,KAAK,EACL,MAAM,EACN,UAAU,CACb,CAAC;QAEF,MAAM,gBAAgB,GAAG,WAAW,CAAC,aAAa,CAAC,GAAG,CAClD,CAAC,aAAa,EAAE,CAAC,KACb,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC;aACxB,GAAG,EAAE;aACL,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACb,GAAG,CAAC,WAAW,CAAC,CAC5B,CAAC;QAEF,OAAO;YACH,QAAQ,EAAE,WAAW;YACrB,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACL,UAAU,EAAE,gBAAgB;aAC/B;SACJ,CAAC;KACL;;;;;;;;;;;;;IAcD,MAAM,kBAAkB,CACpB,QAAkB,EAClB,gBAA0B,EAC1B,gBAA0B,EAC1B,KAAe,EACf,KAAqB,EACrB,QAAgB,EAChB,UAAsB,EACtB,aAA8B;QAC1B,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,KAAK;KACtB;QAED,MAAM,cAAc,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,CAAC,KAC3D,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC;aAC1B,GAAG,CAAC,WAAW,CAAC;aAChB,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACb,QAAQ,EAAE,CAClB,CAAC;;QAGF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC;YAC9D,QAAQ;YACR,SAAS,EAAE,gBAAgB;YAC3B,QAAQ,EAAE,QAAQ,CAAC,YAAY;YAC/B,OAAO,EAAE,cAAc;YACvB,UAAU;SACb,CAAC,CAAC;;QAGH,MAAM,MAAM,GAAG,YAAY,CAAC,oBAAoB,CAC5C,QAAQ;QACR,gBAAgB;QAChB,QAAQ,CAAC,YAAY,EACrB,WAAW,CAAC,MAAM,EAClB,WAAW,CAAC,MAAM,EAClB,QAAQ,CACX,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAC/B,gBAAgB,EAChB,QAAQ,CAAC,YAAY,EACrB,WAAW,CAAC,KAAK,EACjB,WAAW,CAAC,MAAM,EAClB,KAAK,EACL,MAAM,EACN,UAAU,CACb,CAAC;QAEF,OAAO;YACH,QAAQ,EAAE,WAAW;YACrB,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACL,SAAS,EAAE,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE;aAClD;SACJ,CAAC;KACL;;;;;;;;;;;;IAaD,gBAAgB,CACZ,aAAuB,EACvB,QAAkB,EAClB,KAAsB,EACtB,MAAgB,EAChB,KAAqB,EACrB,MAAsB,EACtB,UAAsB;;;QAItB,MAAM,gBAAgB,GAAsB,EAAE,CAAC;QAC/C,MAAM,WAAW,GAAa,EAAE,CAAC;QACjC,aAAa,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,CAAC;;YAElC,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAC1B,CAAC,KAAK,KAAK,KAAK,CAAC,WAAW,EAAE,KAAK,YAAY,CAAC,WAAW,EAAE,CAChE,CAAC;;YAEF,IAAI,KAAK,KAAK,CAAC,CAAC;gBAAE,OAAO;YAEzB,MAAM,GAAG,GAAG,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAEjD,gBAAgB,CAAC,IAAI,CAAC;gBAClB,KAAK,EAAE,KAAK;gBACZ,GAAG,EAAE,GAAG;aACX,CAAC,CAAC;;YAIH,QAAQ,UAAU;gBACd,KAAK,MAAM;oBACP,WAAW,CAAC,IAAI,CACZ,cAAc,CAAC,2BAA2B,CAAC;wBACvC,WAAW,EAAE,YAAY;wBACzB,MAAM,EAAE,KAAK,CAAC,SAAS;wBACvB,SAAS,EAAE,KAAK,CAAC,MAAM;wBACvB,MAAM,EAAE,GAAG;wBACX,YAAY,EAAE,IAAI;wBAClB,gBAAgB,EAAE,CAAC;qBACtB,CAAC,CACL,CAAC;oBACF,MAAM;gBACV,KAAK,OAAO;oBACR,WAAW,CAAC,IAAI,CACZ,cAAc,CAAC,2BAA2B,CAAC;wBACvC,UAAU,EAAE,YAAY;wBACxB,MAAM,EAAE,KAAK,CAAC,SAAS;wBACvB,SAAS,EAAE,KAAK,CAAC,MAAM;wBACvB,MAAM,EAAE,GAAG;wBACX,eAAe,EAAE,CAAC;qBACrB,CAAC,CACL,CAAC;oBACF,MAAM;aACb;SACJ,CAAC,CAAC;QAEH,MAAM,gBAAgB,GAAG,cAAc,CAAC,eAAe,CAAC;YACpD,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACvC,QAAQ,EAAE,UAAU;YACpB,KAAK,EAAE,GAAG;YACV,gBAAgB,EAAE,gBAAgB;SACrC,CAAC,CAAC;QAEH,OAAO,CAAC,gBAAgB,EAAE,GAAG,WAAW,CAAC,CAAC;KAC7C;;AA3cM,uCAAwB,GAAG,MAAM;;MC3B/B,WAAW;IAMpB,YAAY,MAAiB,EAAE,WAAW,GAAG,YAAY,EAAE,cAAc,GAAG,cAAc;QACtF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC;YACzB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,WAAW,EAAE,MAAM,CAAC,WAAW;SAClC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC9D;;;;;"}